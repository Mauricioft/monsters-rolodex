{"version":3,"sources":["components/card/index.jsx","components/card-list/index.jsx","components/search-box/index.jsx","services/index.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","alt","name","title","src","id","username","email","CardList","monsters","map","key","SearchBox","handlerChange","type","placeholder","onChange","getList","fetch","response","json","data","Home","useState","setMonsters","searchField","setSearchField","fetchData","a","Api","filteredMonsters","filter","toLowerCase","includes","useEffect","evt","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAGaA,G,YAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,yBAAKC,UAAU,kBACb,yBACEC,IAAKF,EAAQG,KACbC,MAAOJ,EAAQG,KACfE,IAAG,+BAA0BL,EAAQM,GAAlC,4BAEL,4BAAKN,EAAQO,UACb,2BAAIP,EAAQQ,UCPHC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,yBAAKT,UAAU,aAEXS,EAASC,IAAI,SAACX,GAAD,OACX,kBAAC,EAAD,CAAMY,IAAKZ,EAAQM,GAAIN,QAASA,SCL3Ba,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACvB,2BACEC,KAAK,SACLd,UAAU,SACVe,YAAY,YACZC,SAAUH,MCNC,GACPI,QADO,2IAEYC,MAJX,8CAED,cAELC,EAFK,gBAGQA,EAASC,OAHjB,cAGLC,EAHK,yBAIJA,GAJI,+FC4BAC,EAxBF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACVd,EADU,KACAe,EADA,OAEqBD,mBAAS,IAF9B,mBAEVE,EAFU,KAEGC,EAFH,KAGXC,EAAS,sCAAG,4BAAAC,EAAA,qEACOC,EAAIZ,UADX,OACVE,EADU,OAEhBK,EAAYL,GAFI,yCAAH,qDAKTW,EAAmBrB,EAASsB,OAAO,SAAChC,GAAD,OACvCA,EAAQO,SAAS0B,cAAcC,SAASR,EAAYO,gBACpDjC,EAAQQ,MAAMyB,cAAcC,SAASR,EAAYO,iBAKnD,OAHAE,oBAAU,WACRP,KACC,IAED,yBAAK3B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWa,cAXO,SAACsB,GAAD,OAAST,EAAeS,EAAIC,OAAOC,UAYrD,kBAAC,EAAD,CAAU5B,SAAUqB,MCpBXQ,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.53094690.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.css'\r\n\r\nexport const Card = ({ monster }) => (\r\n  <div className='card-container'>\r\n    <img \r\n      alt={monster.name}\r\n      title={monster.name}\r\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h1>{monster.username}</h1>\r\n    <p>{monster.email}</p>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Card } from '../card/'\r\nimport './styles.css'\r\n\r\nexport const CardList = ({ monsters }) => (\r\n  <div className='card-list'>\r\n    {\r\n      monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))\r\n    }\r\n  </div>\r\n)","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport const SearchBox = ({ handlerChange }) => (\r\n  <input\r\n    type='search'\r\n    className='search'\r\n    placeholder='Search...'\r\n    onChange={handlerChange}\r\n  />\r\n)","const baseUrl = 'https://jsonplaceholder.typicode.com/users'\r\n\r\nexport default {\r\n  async getList() {\r\n    const response = await fetch(baseUrl)\r\n    const data = await response.json()\r\n    return data\r\n  }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './styles.css'\r\nimport { CardList } from '../components/card-list'\r\nimport { SearchBox } from '../components/search-box'\r\nimport Api from '../services'\r\n\r\nconst Home = () => {\r\n  const [monsters, setMonsters] = useState([])\r\n  const [searchField, setSearchField] = useState('')\r\n  const fetchData = async () => {\r\n    const response = await Api.getList()\r\n    setMonsters(response)\r\n  }\r\n  const handlerChange = (evt) => setSearchField(evt.target.value)\r\n  const filteredMonsters = monsters.filter((monster) => \r\n    monster.username.toLowerCase().includes(searchField.toLowerCase()) || \r\n    monster.email.toLowerCase().includes(searchField.toLowerCase())\r\n  )\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [])\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Monsters Rolodex</h1>\r\n      <SearchBox handlerChange={handlerChange} />\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport Home from './pages/home'\r\n\r\nconst App = () => <Home />\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}